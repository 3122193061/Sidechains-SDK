package com.horizen.datagenerator

import com.horizen.block._
import com.horizen.params.{NetworkParams, RegTestParams}
import com.horizen.utils.BytesUtils
import java.time.Instant
import com.horizen.box.ForgerBox
import com.horizen.fixtures.{CompanionsFixture, ForgerBoxFixture, MerkleTreeFixture}
import com.horizen.proof.{Signature25519, VrfProof}
import com.horizen.consensus._
import com.horizen.secret.VrfKeyGenerator
import org.junit.Test
import scorex.core.block.Block
import scorex.util.{ModifierId, bytesToId}


class sc_node_holder_fixter_settings extends CompanionsFixture {
  private val seed = 49850L

  @Test
  def generate_scGenesisBlockHex(): Unit = {
    val parentId: ModifierId = bytesToId(new Array[Byte](32))
    //val timestamp = 1574077098L
    val timestamp = Instant.now.getEpochSecond
    // Genesis MC block hex created in regtest by STF sc_bootstrap.py test on 14.01.2022
    // related data: see examples/simpleapp/src/main/resources/sc_settings.conf
    val mcBlockHex: String = "030000001e2aac9f7a6900e4aed2c2e8da3303a093a894c81de207aae3894de56115ac08f0237f64e01a2181a89163fc135811cdf6f00c5350b819a1a165241d202557cf77323a56a71132b81e9fabc0e00980f3e742c7b034d268f0475d28a9e8a76a3c6251e161f60e0f203d00a37101b11db92e5e519b5ef1f9875d7dab91622d84902cd914c7292100002406118cbe746439572a0ae8d49fc0c38ca3a40808299b10ff05fdc811d98f1511e5291fb00201000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0502b0010101ffffffff040c24b42c000000001976a91407e651b6ddbc88923881632bd7806ba16237df6388ac80b2e60e0000000017a914ea81ee2d877a25c7530a33fcf5a65c72f681250f87405973070000000017a914e7d25d82be231cf77ab8aecb80b6066923819ffc87405973070000000017a914ca76beb25c5f1c29c305a2b3e71a2de5fe1d2eed8700000000fcffffff0e634c245d29d9596dbfebcbac2219cf6629e919abd1d4f602bce1f025e7912722000000006a473044022034b32ae5c10fb11dd404b2ba488dd620315d93b92d471de6dd6c1cea54e51b1202204ed0a75ba2dc83dcdbb51e28a6dab3f09c86743c0799e994d4ab877ac2039a33012102cd0f442f708f96b5b15db612b5dec39c9b5f99d83d9efff068d3238cd1b368e6ffffffff6c5e0a6807a35e10111f5f792f02f1d99a8e2c4f5f5abf740f967fc3606c70c0000000006a4730440220591ae5694e50f519fb45627a45b0d9b6b5d54bac20e451c20ae7351114d15bd302202b4826d28b9ec3686d5c01dbbf800f614b9ff594d077d3f08d49bac2853c8212012102cd0f442f708f96b5b15db612b5dec39c9b5f99d83d9efff068d3238cd1b368e6ffffffff5f00551dbb7ac2611f04ee3f83064fa47b203ee4ea635504246828fe16563b41000000006a473044022025657b56df2832fb279e11e1adb30e8546831bf83321bfdd99ababdd884b363e022063012fad10c1bd0ffc2ac629b70b6e065902918ec461b2950dbc359f2df1e440012102cd0f442f708f96b5b15db612b5dec39c9b5f99d83d9efff068d3238cd1b368e6ffffffffe64a3798884ed7db6e51fea932b5cf50bd512197fdfd2231fc5a73652ced6b41000000006a473044022065a8f9b01d6fb0c95c85db7d1af539a10a4e882c6b163c0e261a5b85eebbbf3b02202ce442871f5874ec81e8262709cf7498ab8d72a84487f55a83d30fb0e58651a0012102cd0f442f708f96b5b15db612b5dec39c9b5f99d83d9efff068d3238cd1b368e6ffffffff61ecacd75f745a4a48ea55768d9b715325ad1080915de1a4ffbec0c0991deaeb000000006b483045022100cbc880c92fe295c2426035db02d4fbbc56bdbe8f682b64bb8b7b37f245583d9502203f44638e7328a47b9861ae1839b5ccebefc376703bfb7bf5d9cf13c3669ca163012102cd0f442f708f96b5b15db612b5dec39c9b5f99d83d9efff068d3238cd1b368e6ffffffff649711a9945bdc823a530cc9810c448c90c966bcca422de6d2125e21b0716479000000006b483045022100e993e6fbb4e9072e8a40c6858c442c1bb3f61a72c626f3a78253b4f2d200b8e90220527896f56858e1b92adab2b65eacd258dd57969337b18deb45880a6b2be925d6012102cd0f442f708f96b5b15db612b5dec39c9b5f99d83d9efff068d3238cd1b368e6ffffffff66b45240d5428e1f38ba402ec5e12632e78d562c70698f9cf7a5670da23230a5000000006b483045022100aedbb89b7cabac7558a8ca8aeaa9f6f66f0b7929913248853ca222cf167df8700220296d5f40064f88a4415584cf2e52d5c278c78c97d44c0646039858bc359660db012102cd0f442f708f96b5b15db612b5dec39c9b5f99d83d9efff068d3238cd1b368e6ffffffff679234fcb5e9bd542ca3d39005d4157285f968ab26992544542638f3ac07f169000000006a473044022068cbf8a4c61cb99cefde268718b26b14c9e709480e51b3fdd93b32ce08ca829a022007261485411579fa28fd996b9f19b1d21277be7dc06f720cfa917d65b91b181c012102cd0f442f708f96b5b15db612b5dec39c9b5f99d83d9efff068d3238cd1b368e6ffffffff69689bb7032924cb7ce39153468d7d1cf76649f58722d08fc219d85679fe3363000000006a473044022032f234a9093e53d05b386417ff5ce20f415b9e5fcd649147417afa0079f802f302201b07663fc4d0b07259d09dd10a5e6edff1474e843a7c072e06be86381e2253b6012102cd0f442f708f96b5b15db612b5dec39c9b5f99d83d9efff068d3238cd1b368e6ffffffff6a04f84ba6ebcd9201852049784ced902e42d13fcf5d80dc6a0bc138da99bece000000006a473044022013fc3c496a7f0a8d5d3ff3e150d10d44af7bdcb1792102621881574b8dc4b19f02207f43f31cd940657fdf0defe65fd96057f587f07e5e7d4f74668132e1cdd06f31012102cd0f442f708f96b5b15db612b5dec39c9b5f99d83d9efff068d3238cd1b368e6ffffffff5e615e45291d04be11689a6a60b75fe144a2f4d9056f3542e659c8f06b1845c5000000006a47304402202f0d3ac7fc3f8490fa27dde1fdb68f43fe8aca358765c2d8afeecb6864b791320220415906173061ccb0b35c5c19881ddbb9f9a0ddb24c2c9d40dfc4416da60bd643012102cd0f442f708f96b5b15db612b5dec39c9b5f99d83d9efff068d3238cd1b368e6ffffffff6e7b53c24c5596d31ccf5bbf42def4ecbf41761569b1dc2b3ea36251d7de9cc8000000006b483045022100e6dfc2839ad19f4de72527199d848b2e5b59851447e54b17783e56d6df74b88c02205fd79b8c6d04bc1d6f98738026d428740868eb133ff89e19b22791b77e012c09012102cd0f442f708f96b5b15db612b5dec39c9b5f99d83d9efff068d3238cd1b368e6ffffffff70bbff1dcd2df2736920ae89c06132331e5896d54b6802f3af3c7930d9451907000000006a47304402200974c5f0d5c4904a5dd30389a1eeb52ae14c37c8f0c84783d2c339fa71ebd2c1022010d390b55d66cf65b685c52104a719a0848c13a851c07bcc9d9f1068ae4ad8c3012102cd0f442f708f96b5b15db612b5dec39c9b5f99d83d9efff068d3238cd1b368e6ffffffff722725cda104156e9d15844759a5e1f9dca78ec35e226fbc9e018dbe42c9e9d8000000006a473044022003e2d74956156f1b49c14c029826b5394146c20a824996b0f1b38e4a388c330d0220148fa35f52a0b3c6a7363987166326a4425b2033796718465c5bc079d901aed7012102cd0f442f708f96b5b15db612b5dec39c9b5f99d83d9efff068d3238cd1b368e6ffffffff016899e60e000000003e76a91407e651b6ddbc88923881632bd7806ba16237df6388ac205f61ce063e5e7513888f8fdb0498ef07c084c579a8d92999e7e22ebbd0fb780d028300b40001e803000000e40b5402000000acb24b2f08e8e56fe1784f1600879c697c7cd90846e076724b090fd72206b1a521ec7d2087a345acc8fdbc9b52659c2fef86c7fa3c31129b39766e295625d6a014800120f3e6ea66c4e613edaf2a04c759537dd657bbc14ac4db6d9e40286c37ad6f6311fdcd0102386700000000000004000000000000003c67000000000000bfbc0100000000000c00000000000000016234e8c194d555b5ff6a082286b8241f7a1bc3d4dd71e8a88e6db8729a3de324000001c8bbcabb872abdd97870980b4020f7d6a69bd8650298c0e8984299f6ddc9eb35800001e0b56d7145dd7b006e0d9b2ea1b5bf65c26dafc33dd36fc7675eeb58ba247613800001101c1881ee4e14ce72f762869875980e3e338ce353efd0469d2d74b6254fcc0c0000015e77dbb1889b9d36cb1f345b4290894b5d27c4fea13c19ff202cbffc54d78123800001cadc641bb884c20af1d99f02c6fdb3bc837e8a436a7710252165ec6880a8d23f8000013b43af52de1e9c5e4eb52414ff12c7ec15bc499b83395dea1351640e778bf228000001c3913d5f157b058abe12eda99febaa5bf8cd3eecd768497a12112f22dc3cdd3e000001bb2e8f15c078157fbdd179843702ff55e432cac0fa60ba7459ed918f2c2df91c000001ebcda0614fa4946d2a109bd5871a10966510b9e7fa4e05d2848a4cbe49c46f1480000191aa89e90907e0c714f7c0d931dc6707d7ff2ab4e85f79769b8392d99bc95d1e000001a0877645bea04a236ec766cc0b2439c22c4c8e0fca9755ed070a1d21c4273414800001fdcd0102d7160000000000000400000000000000db16000000000000a3a40000000000000c0000000000000001240b188009319f7b6d12739001b47917cad72fde9d0ffaa7dabf7836b46bb4300000014f0c379235a1038e5851edd33a6586a8f714c4ec898ddcd066f7ae43b7a0f317800001a5efe5004f93193ec208703cd2b9b97d4a323ba0f7b7c1454ba435a3de51b130000001a98bfe4439a478c0dddf5e75f504e21f7681a022253a19bc9b8801c59e3aef39800001487a4d0201582fe4d8eafa36fc5d8d65dc9620fdfa204f19e63cd3a69962ec3c800001263ca5ab720ee91d4db9b668a8fb3304453ac58fef70587681c567b1b27fa332800001fa0c2b7b756fab8968631267404b93c76baf329f05be068f1397e728c2a5960e80000121483d74799c0d77720e12a913ebae05014d521b0dea4235263ccd1b5c97a50c000001b3c7a90ddf7f74f4f24013a6ab97f5b791da9bb0dd109c079db6ff8511d2233780000175a25117ecd062b6eff590623ad2ad97f71afb4ba7f1951b4ba97cb49f87ae3200000171543933865335ccc19f7162f34eb43cd4554b2a61ab33c011ea66b60d2cfc1a0000013799cf00e1c8194ea1195f047330f55056d713b15448565e9158cf37a644153e800002ffff00000000000000000000000000000000000000000000000000"
    val params: NetworkParams = RegTestParams(sidechainId = BytesUtils.reverseBytes(BytesUtils.fromHexString("10eaeed096570c6d97c1b3bfb5edda550dcfc070fce0c0563afe78431e5971c0")))
    val mcRef: MainchainBlockReference = MainchainBlockReference.create(BytesUtils.fromHexString(mcBlockHex), params).get
    val mainchainBlockReferences = Seq(mcRef)
    val (forgerBox: ForgerBox, forgerMetadata)= ForgerBoxFixture.generateForgerBox(seed)
    val secretKey = VrfKeyGenerator.getInstance().generateSecret(seed.toString.getBytes)
    val publicKey = secretKey.publicImage()
    val genesisMessage =
      buildVrfMessage(intToConsensusSlotNumber(1), NonceConsensusEpochInfo(ConsensusNonce @@ "42424242".getBytes))
    val vrfProof: VrfProof = secretKey.prove(genesisMessage).getKey
    val merklePath = MerkleTreeFixture.generateRandomMerklePath(seed + 1)
    val companion = getDefaultTransactionsCompanion

    val mainchainBlockReferencesData = mainchainBlockReferences.map(_.data)
    val mainchainHeaders = mainchainBlockReferences.map(_.header)

    val sidechainTransactionsMerkleRootHash: Array[Byte] = SidechainBlock.calculateTransactionsMerkleRootHash(Seq())
    val mainchainMerkleRootHash: Array[Byte] = SidechainBlock.calculateMainchainMerkleRootHash(mainchainBlockReferencesData, mainchainHeaders)
    val ommersMerkleRootHash: Array[Byte] = SidechainBlock.calculateOmmersMerkleRootHash(Seq())

    val blockVersion: Block.Version = 1: Byte

    val unsignedBlockHeader: SidechainBlockHeader = SidechainBlockHeader(
      blockVersion,
      parentId,
      timestamp,
      forgerMetadata.forgingStakeInfo,
      merklePath,
      vrfProof,
      sidechainTransactionsMerkleRootHash,
      mainchainMerkleRootHash,
      ommersMerkleRootHash,
      0,
      new Signature25519(new Array[Byte](Signature25519.SIGNATURE_LENGTH)) // empty signature
    )

    val signature = forgerMetadata.blockSignSecret.sign(unsignedBlockHeader.messageToSign)

    val signedBlockHeader: SidechainBlockHeader = SidechainBlockHeader(
      blockVersion,
      parentId,
      timestamp,
      forgerMetadata.forgingStakeInfo,
      merklePath,
      vrfProof,
      sidechainTransactionsMerkleRootHash,
      mainchainMerkleRootHash,
      ommersMerkleRootHash,
      0,
      signature
    )

    val data = new SidechainBlock(signedBlockHeader, Seq(), mainchainBlockReferencesData, mainchainHeaders, Seq(), companion)

    val hexString = BytesUtils.toHexString(data.bytes)
    println(hexString)
  }
}
