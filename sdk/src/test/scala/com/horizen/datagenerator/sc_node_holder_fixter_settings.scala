package com.horizen.datagenerator

import com.horizen.block._
import com.horizen.params.{NetworkParams, RegTestParams}
import com.horizen.utils.BytesUtils
import java.time.Instant
import com.horizen.box.ForgerBox
import com.horizen.fixtures.{CompanionsFixture, ForgerBoxFixture, MerkleTreeFixture}
import com.horizen.proof.{Signature25519, VrfProof}
import com.horizen.consensus._
import com.horizen.secret.VrfKeyGenerator
import org.junit.Test
import scorex.core.block.Block
import scorex.util.{ModifierId, bytesToId}


class sc_node_holder_fixter_settings extends CompanionsFixture {
  private val seed = 49850L

  @Test
  def generate_scGenesisBlockHex(): Unit = {
    val parentId: ModifierId = bytesToId(new Array[Byte](32))
    //val timestamp = 1574077098L
    val timestamp = Instant.now.getEpochSecond
    // Genesis MC block hex created in regtest by STF mc_blocks_data.py test on 19.01.2022
    // related data: see examples/simpleapp/src/main/resources/sc_settings.conf
    val mcBlockHex: String = "030000006d2cbe14e3de40b48da4a94b447a115b93edaa92268d60fa4b76368c2c72c10b2dec2bf45fc9197286ce5caf4086049a9dce1a4af07e9c69b4ebb336a17472b4dce07ff177323725ff380c554906bd6eea3a8f37135a9406c3373b33840dc4159d8ee861f70e0f20020086f6ae1e3590565f40a0aa9703a03aac605f2e763084e19b1767abb10000240689fcbfa0a8a8713118e7a67cb38f66454c0e0fed9b02a2210cd51271331a8946ea8f540201000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0502a4010101ffffffff04df2eb42c000000001976a914a8aa7ff4a82fe0dc1dba760667826d0517f2783088ac80b2e60e0000000017a914ea81ee2d877a25c7530a33fcf5a65c72f681250f87405973070000000017a914e7d25d82be231cf77ab8aecb80b6066923819ffc87405973070000000017a914ca76beb25c5f1c29c305a2b3e71a2de5fe1d2eed8700000000fcffffff0ebc63009234a3cdd14bc375d51847927ae85afba52a89281597c1b472c226e1b5000000006a47304402207a1c2332a54babbe48fcd55e37913b2b86511da1a2ddce24ec377be928b62cbe02201efbf397adc252b067ce6a5f4e6b162908482c97669df34dcc0896131fbbe1a40121022b4a3041c3150a2ab843c01c3fd6dc539a6299b74fc27a21dfb358e48509afbeffffffff4fd7bd36bed2c25d289eefc0a331f5496a77c09c55452a08272700aeef65b2ed000000006a4730440220121bcc6c367c1866084aae84d9f46c646113312acb9cb40145c71cebfb5a14f9022053349bf880fe65295ddfe78a11cd9f5112199354a60fe1c9276a9de3146882430121022b4a3041c3150a2ab843c01c3fd6dc539a6299b74fc27a21dfb358e48509afbeffffffffc253bcceb12ede9c0fb733cd4897ea06fc9ff838550c5b958dcda45cdbd3e23c000000006b483045022100f4ead3f5b4b5024337b2a943433c63f20bdcdc0eeb5a720620f8542ad3a71e5a022051a241bb1409b2660dd5fbcb2c06c76eb7b2c797dab0fce5ffde5b4a95ef957d0121022b4a3041c3150a2ab843c01c3fd6dc539a6299b74fc27a21dfb358e48509afbeffffffffc09e1d09bcc6639bc5fb30e5fc506fab92f5ea32c526fb0c9ce236e06bd31184000000006a47304402204a53f314cbce0d6e52ebe4aacc2d480e8ea7d2fb667c54c95bc0117bc8aa3ef40220128821a4589ee1e816711bb6a7524593049304707095896cf33a97a70a7126a90121022b4a3041c3150a2ab843c01c3fd6dc539a6299b74fc27a21dfb358e48509afbeffffffff51c7abf81db60724dd9495088e8ebd9d3517e03f76a61b76759fd45f63e83ecd000000006a47304402206eff07295811b00a96e372fb1b24a32c8b4f56e9c4a76bffeacb95f3355afc190220656bf53db17ea7f2840c778241232f7a178e38872569c25bea38ffc1c3fba3010121022b4a3041c3150a2ab843c01c3fd6dc539a6299b74fc27a21dfb358e48509afbeffffffff5296f5af9b919efa3f61339dac2ac8550e2240c0e9b1dcd63e60d70376c14ff6000000006a4730440220181cff5a0684dec2311c867e630982f00dd8717de9f0743f471be133f672645702203937e2cd8f4caa29a6b85f784d3c94f8bc0ef1c0e2c71d5ee047a8929a8dc3120121022b4a3041c3150a2ab843c01c3fd6dc539a6299b74fc27a21dfb358e48509afbeffffffffbf7515eb9aa06d31bc06a370a0b4e841c8ca23a2b4100b34b565dbb20de532ed000000006b483045022100daa09dafa1236d24011f7e1119ceea01069a9a6ff1ab36bb8dd7497634ae3d91022071b8c143d9ebf257ca15302eb4a78139bb3d0bf661c4dceb68a0e62e36d8cc010121022b4a3041c3150a2ab843c01c3fd6dc539a6299b74fc27a21dfb358e48509afbeffffffff553067be6d251b96b3ff9785677202b74eab76fc6ac2aa6302fb8663a105d806000000006b483045022100c1a39fa157c253fe02d412df55c25bc295e5c31fa33a2ce5e4e822356d8dbb8f022017943b4a0b39e0b6276effb27990ef4fe9f333e27822d3b533ea65439ebef0fa0121022b4a3041c3150a2ab843c01c3fd6dc539a6299b74fc27a21dfb358e48509afbeffffffff575f40e021c9d9e3b008ef35fa1ff24df404a0b8b9bb1c34f8fe64adc511a181000000006a473044022070f181e53e557ac33256a2b23d82011ad7d0d8383ee7a5f1dee3aac774538c66022016b75f3ed036389b3d6484f0036533e00438734ebd79e96bdfbeed6006ca7aef0121022b4a3041c3150a2ab843c01c3fd6dc539a6299b74fc27a21dfb358e48509afbeffffffffbd89c43b42dce3cfd88657ec87ac8c231dae63c98d6610eb50e81e809d7f28af000000006a473044022013a954e4d25a1489119c179f8ded12112f0055c1e1de7c748353d2cb8e84b2730220312c6edeb0257151455e3311b22f2c21c77881a1534b189e78fce7b03574aed70121022b4a3041c3150a2ab843c01c3fd6dc539a6299b74fc27a21dfb358e48509afbeffffffffc369bde7df0e1dd4243ec26af830b845930016717c6013d4640fb65311d1401c000000006b483045022100d599c8d1ad7947bfc8688ac84d4f44fbf37ff551c6df708d240d5f86209c71900220674843d10e0ead5998e6c2d7db76aad593f6572973a2c0e2d2eb2c0b968b844c0121022b4a3041c3150a2ab843c01c3fd6dc539a6299b74fc27a21dfb358e48509afbeffffffffbc0166e4c5c92f2669ac510e61bfce4b9457653aa4f1e0802b645693f9828060000000006b483045022100cc2b5969b0a7ad19333bfe854f4adc78618cccae1c02fda9aa4f10ed5a76111a0220643dd2bdb093c5318dcaf7ae4fea082d5ce7d745ad6fd556fc084908edb054cc0121022b4a3041c3150a2ab843c01c3fd6dc539a6299b74fc27a21dfb358e48509afbeffffffff5c934d26d9f303ebbbae28d1fe25b9d96df6c426a438dbccf216fe35f77917c8000000006a47304402205e7b2df292344e00851b20aac96a8f4eee49f04d0bdf11d9ab81a58cd9fa54a902200234d4781ea3d878c6180dce593a201f7ecde2ff2abecffe23e6c5ce4de541950121022b4a3041c3150a2ab843c01c3fd6dc539a6299b74fc27a21dfb358e48509afbeffffffffba5824fba16700461ca0a0717a5a414d970fca8096cdd7f4bc2f5b6b11039b1b000000006b483045022100bf6a4a1c54a3a1e85d20977379a1ce018fa5446826704667e82efceca39c59bb02204d1200c7a7c0f72f8ff6613efaadfde74b3ef59b121aed5db68cd004d21a2a4d0121022b4a3041c3150a2ab843c01c3fd6dc539a6299b74fc27a21dfb358e48509afbeffffffff01a14dcd1d000000003d76a914a8aa7ff4a82fe0dc1dba760667826d0517f2783088ac2061da22cd4fea74524cbc873d2a2bdbbc85235310dd4f43ade8ceacb22e793d020177b400018403000000e40b5402000000acb24b2f08e8e56fe1784f1600879c697c7cd90846e076724b090fd72206b1a521bb00ed230158ba369b9c8b4028dd8c7884be1384d86f38914070d6d2eea2811b800120858d05ee369300e22616d8c875f798e8d625aff9250af4ff41627567dcc1400efdcd0102386700000000000004000000000000003c67000000000000bfbc0100000000000c00000000000000016234e8c194d555b5ff6a082286b8241f7a1bc3d4dd71e8a88e6db8729a3de324000001c8bbcabb872abdd97870980b4020f7d6a69bd8650298c0e8984299f6ddc9eb35800001e0b56d7145dd7b006e0d9b2ea1b5bf65c26dafc33dd36fc7675eeb58ba247613800001101c1881ee4e14ce72f762869875980e3e338ce353efd0469d2d74b6254fcc0c0000015e77dbb1889b9d36cb1f345b4290894b5d27c4fea13c19ff202cbffc54d78123800001cadc641bb884c20af1d99f02c6fdb3bc837e8a436a7710252165ec6880a8d23f8000013b43af52de1e9c5e4eb52414ff12c7ec15bc499b83395dea1351640e778bf228000001c3913d5f157b058abe12eda99febaa5bf8cd3eecd768497a12112f22dc3cdd3e000001bb2e8f15c078157fbdd179843702ff55e432cac0fa60ba7459ed918f2c2df91c000001ebcda0614fa4946d2a109bd5871a10966510b9e7fa4e05d2848a4cbe49c46f1480000191aa89e90907e0c714f7c0d931dc6707d7ff2ab4e85f79769b8392d99bc95d1e000001a0877645bea04a236ec766cc0b2439c22c4c8e0fca9755ed070a1d21c4273414800001fda10c02d7a70e00000000000400000000000000dba70e000000000062951e00000000000c0000000000000008928c4e36a3e31e67a47863715990ca39b32f14e92e193012332e51446dc7a73c003a07fafc76a23266429049ca43b9f1ac2ea7baff0aedbcfa07919e2a5340b51700b3a05499134b0bbe3d012d160626b5f0fdc791899217165d626d9dc66443390100fc2bef68b8d16b76fc0feffbf3393a32286ea7e6666e8748309ef7d0b7fbef338091059fda9e88bf2a89403d20f2af347823e31ac552db4eae65575d80f3b9041380d0f38d630b0e842d0fb51b861a6c60e67a20a2764b15de6abc1e40dd33471a3d80c36dbdc6feb46adafcc2bf4c37e6107feeed32bbfe3af2a1941003302861801100bc8b436c1deadae25437f132237eff6b3a954fceef586a00260b92db5cb28f2c800008e2ffc821086f40a8662285c6ab2482c3885d2e28b20a88e23b46ff7ca20f4602809d9baf1f0152e4bc28e29afc414fcbf8304060f396063651ead6c019284f9f3800297a3a40994779a61b63eadd655b427117b05f07f47cb8d256a39d4f45fc6a3680d5ff4759f7eb5f10462028a5cbc839814be100a606b205928ffb44d0e8382012008b5c62596faa3bc1f0ca0418357a2e5e915bc2719d0fb5a56e4e16f10b2fb81280381934ff9e6add6e25c36533fe30d1f893c03d03bf16b49a33f33ad6ec2ba101803b334280c53054e41f89e35efa1a1aa1430634127b4ee9391920d1fba884f716002017d5d48c74ca40ffd95a35f6376b9acee517e03d961122dc0c7eabdfabee3b8000080699aaccf3ee0fe0d7e22ad0c215c552a5d3477ab0dbfb8378095808ca5d591d00a5619811b5f3714eae3ae0ab3d597b54a44421a98963545e0a877944ba7afc0e007f3b1abf88abecc7e3b1b808515a4d25debc2f01f7bd2915f3a4eccf3ac5993c80a9e6f2c56b2bd59484f9f3d6af5265eea2323152810cff8cc8d979fbf2ed6c29801a413354e385a6d1bc4418d363aad2973f476a1c5ae74f856d118f89735ec83c8064f084a0cdafb83c95e51b522d2a4dc24ba812b296c7589b06f4bf3029a0100a80b9a980eed407bc39e4c2fcc7a6e56d74cd9c49f7c62aca37570be118bd82af0e009f2c2ff61d0e13ba01684b7273b1db12eb44ee410bb0b02a9e87f290d79a27270000088c33b7d66769c41edcf5d773b93900744803b8cd35a16f9044540d2f544b5e1380bd68e7c8b8d4d9ca6f8a45318ffb0322f010f1c454a0112af8ae5bd02c6abd20805bf726856fc9bd383d13d870d209124c40d54665ac1bd2cf2873598999a2791680841f49e8f3d982a1e44e8992233a0708cb62067518d65bcfd634dec30f744c0080cb3ab237eee15b8d8b9f92fde2e5eece8b4b9222ab0299e4f474cde418be2f05804ad362238b7e88716c975afbd32f751109aa0a91def9e94ec59bb2510d6e8929007be79b17da6360aef1674a78ee92812462eccb1130d69e93b93652ef599f06108092e8b4331174ee76829933f35c16d1d5b340dbb92cb3972a474389ccf2ba46398000080e94b252e06b96ae885d5bfea2a18542f9b0b6e02b62fd06d3dcbe9d4f08d61280ea95c062a8809e1a0dee1fc3dbebf5062bc361a1f0d3f6a1c8d0c2680db8861d80a60167b40a86915770d8d9c9bd98ec1cdd47dbaeab8144f4d207e70d59906e2900c96a7a765f97c6cd4abb7fc547963034ab556cec065388f0371b8596450b0820808c0748b6a6f01540d735a6fdd9b153a7f4fa7b2097b562b3f2ae97b362f0bf1f00bd36e99b680050d51107020274aad1f69bbec61457204d8f1a3b44cce9130224004fdc0347aa3f8c8b7c814a709a9315e7d960fa6943e4adbeb7f6244701c1540d8049742ab2f558698eb7795c3820dcc9621cc481c18de3bcc2e3070bc9c85b9735000008dda7c1f68bd0c5ecd2a443c8a75d929c497a8d5a1876adfda969277cbe4efb0180f5358a32b1ef91f3c007052c7f17f44752cca1d52eabc1ab07a614221d2ebb070011f005fa07fe2f07a498f32e04cdf295c0850c5e14b7506112c5619062ed5c37800789cb02e14d2ac6bb58985dd5a067f12bf397f29fe691ddb972fb0bb955101c005803c20e84350e813ee8997c441172beda12692c88b2f7a5ae7a12890d2fb81c80f8ac0c8820c5bb61135fa716137ecdfa3603b696e6f750d19e501971839ccb0400ed921bce8e882f7d372ff696220259f34ef62331b4c8962b631c802418af6c3680a6a89c2a3f896e11ab184e0cd453c0a9a7e0cadff14549fc41265a16c07946000000089c8ff001a29d80c2b7e5da90dd8177f177e368f8e897a8e76adf767d655b3f158097eec429cdcf5c4aaf02bbc43a31bb2f966f132dd5e0bef525daabf03876370280cafa0fe272d5c07e76ff861e4e160b0530cff2f4fb983373dc9b455cdfb49b29001f78778a670792196261505aa25f9fd904be5cf3b0a23c9b096d1fcfcc09352180c62bce97c023486fd0cf0208c0f4d3a190b29eb1c3ef38fea456e41834def305803a35441208ce5db83ea493dfee103842179f206d19a63b5576d5ac1e75cbd815807085c7f75406c2b4821f508b4edaad9fe7386bb3da92558a23d2af64de75ac018041a7eef86c7e9bf3853bff91512e57021f2cc21e445c481f2b1b84e46ee65a10000008ed0358b6d85b0c62ce0825652825e4dc5457c7cc6ed1ff3fa80ec785cf4f090e80addd797a953af01bb934d44ac301ce50e6f4dc5d072c8b76877d59331af6fe3f809a8ad86c5967c0f3743d14b0739e0da9b2a50d9cf4b9034533c3e20414321a2a00f3d504874c0a33956f72cb46209806f30725385df0c1e63ff285fb9b0a9c2d0580112915e159801bea12d37b1c7e1d88c9dcec2f98c4498f2034a2334064c42b3a807c09f0d43909d3fc55951ef9cc9dcb48df0c0710eeff0680bfce03dfab10f908808ebc05ce77146da295b8cd1f55016c0a851192627c8f4a80dca67512553f3e0d00e803378486cb43631d05e69d19fb932d11cec6f79659f732df4907917817bf2b80000834586da86747456e176afccbed1b1eaba4077cf25e1957e84f83236393867f1a008c22e0890931f50206274af4476ed0d504742219f73f9934181b8e95c11c4b0f0087ba8cf32b0842f511d7831a02399f5708d6a9f833f65b561332dcc774130308009cf77e05cf2b3aad336dd2e27de07853480f8dd11c10851d5b608cc927bb6f2a00a3a037770c155a2f6f7beb227048d175aa378686dd1ad372e951c6d92a1c222500b53c2104263b067387ce4807e9c75d31782a12d28346c7ccbc9b288bf010410d003f6d01f346e5ca1c6f82a83dd5390f7be16bddc4721e9674f9cb64a34e82250200db9c0eda7e66e010a6892e2bafb21453ada66873603eeaeb25c66d32c6db712d8000082c26c188a30e0262c9e4eed094cfb37f8875a59c8af2f52dc4cf499d2a1e8c3d80b4ce91787794cf447c7f39a4cf30f11628aa28a1d2e4f995cb1c6e846bc6c434804ef8dc1f29028da05049835127273b42b359378baf35337626b3eff10ffbeb0c805505a32fa7100df2b8380226fed7467d0e6b0a68c184095fee1ceee4ad26da2780605e19cef403c83310bc3020be5190229ede441bd987acd2e3479b79ee53440180d62460f9624e7b0e8740a09183e9b21de2d11d3a04fc356b4724b0687b115c050071162d7becd091c543b41b9b50c3331af6f9028387e4ea2938b2b1a0a517560c001e794d111f41abfb4716105b477b7b2f6638e59dc97a19d68ec87286ef169007000008a73d62100c40ac5a9335d9113b53817c82c919d16a71763f08236586ad98d40c802700f9b126679dfea74dd3c4f7566ae3f08be4d434e815dfd43761d11198d11a000ff0558e7230d90775c7ed00d941bab15e8f5df2d2bc6c5c8db9f5b899d0f72e80007fd19cb916bcbc1ba054654c3e2ebd366869da51b39d110ede28af4d38ff2e00446902b0b27e83913a8fdd9598b9c6218f966c65dc66a90dea9c2082fa1d073900a5030daf387233bda44f6b61fc10ec58111931a9abf4f2698248a608788e793e80a49483d7b671848db3267deccabc55ed9a0a8dec3754a673a9465978784b633e80d3f077bfd46b532cf822304ce49493379a72e7fd9063cdd3619327635120d809800008916ed3f5b4bb8162c016850689e007c98277ff6d1f9599a3851553d3ede50931800a0f5569893f1133154bae7926e335eee1654028e35572fb3e1333c6d621f82c00f2b60679176ad6cd0a882c2aa831646d8fc53effee66f514127bffc094d976200010e62a4d8613da9962519bb0493c0b9e77f26cae339ed5547b181ea1a8fe7207802812eafdd5e28f8beb7a413c47f6cde17343221c549d9072f6459456491db93a00f708b2bd3352198963f4d86c429e285c39a17a9f49ec12714214e3dfa26ff613000c87d1cb8e8d0e62c015373bad3ac2a9722cd839184475d27d321b512175b42600e4238cc343935566d18425e70d9703f1c67d0ad270f99c5e53e9e6c0f577693d000002ffff00000000000000000000000000000000000000000000000000"
    val params: NetworkParams = RegTestParams(sidechainId = BytesUtils.reverseBytes(BytesUtils.fromHexString("12a5591663db80b3dde084419148f1f33ffec3b3bf8bff75234027dad4b027fb")))
    val mcRef: MainchainBlockReference = MainchainBlockReference.create(BytesUtils.fromHexString(mcBlockHex), params).get
    val mainchainBlockReferences = Seq(mcRef)
    val (forgerBox: ForgerBox, forgerMetadata)= ForgerBoxFixture.generateForgerBox(seed)
    val secretKey = VrfKeyGenerator.getInstance().generateSecret(seed.toString.getBytes)
    val publicKey = secretKey.publicImage()
    val genesisMessage =
      buildVrfMessage(intToConsensusSlotNumber(1), NonceConsensusEpochInfo(ConsensusNonce @@ "42424242".getBytes))
    val vrfProof: VrfProof = secretKey.prove(genesisMessage).getKey
    val merklePath = MerkleTreeFixture.generateRandomMerklePath(seed + 1)
    val companion = getDefaultTransactionsCompanion

    val mainchainBlockReferencesData = mainchainBlockReferences.map(_.data)
    val mainchainHeaders = mainchainBlockReferences.map(_.header)

    val sidechainTransactionsMerkleRootHash: Array[Byte] = SidechainBlock.calculateTransactionsMerkleRootHash(Seq())
    val mainchainMerkleRootHash: Array[Byte] = SidechainBlock.calculateMainchainMerkleRootHash(mainchainBlockReferencesData, mainchainHeaders)
    val ommersMerkleRootHash: Array[Byte] = SidechainBlock.calculateOmmersMerkleRootHash(Seq())

    val blockVersion: Block.Version = 1: Byte

    val unsignedBlockHeader: SidechainBlockHeader = SidechainBlockHeader(
      blockVersion,
      parentId,
      timestamp,
      forgerMetadata.forgingStakeInfo,
      merklePath,
      vrfProof,
      sidechainTransactionsMerkleRootHash,
      mainchainMerkleRootHash,
      ommersMerkleRootHash,
      0,
      new Signature25519(new Array[Byte](Signature25519.SIGNATURE_LENGTH)) // empty signature
    )

    val signature = forgerMetadata.blockSignSecret.sign(unsignedBlockHeader.messageToSign)

    val signedBlockHeader: SidechainBlockHeader = SidechainBlockHeader(
      blockVersion,
      parentId,
      timestamp,
      forgerMetadata.forgingStakeInfo,
      merklePath,
      vrfProof,
      sidechainTransactionsMerkleRootHash,
      mainchainMerkleRootHash,
      ommersMerkleRootHash,
      0,
      signature
    )

    val data = new SidechainBlock(signedBlockHeader, Seq(), mainchainBlockReferencesData, mainchainHeaders, Seq(), companion)

    val hexString = BytesUtils.toHexString(data.bytes)
    println(hexString)
  }
}
